import fs from 'fs'
import path from 'path'

const FILE_PATH = path.resolve('posts.json') // –¢–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Ä—è–¥–æ–º —Å –∫–æ–¥–æ–º

// –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π JSON
if (!fs.existsSync(FILE_PATH)) {
  try {
    fs.writeFileSync(FILE_PATH, '{}', 'utf-8')
    console.log('üÜï posts.json —Å–æ–∑–¥–∞–Ω –≤ –ø—Ä–æ–µ–∫—Ç–µ')
  } catch (err) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å posts.json:', err)
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å
fs.access(FILE_PATH, fs.constants.R_OK | fs.constants.W_OK, (err) => {
  if (err) {
    console.error('üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ posts.json:', err)
  } else {
    console.log('‚úÖ –ï—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ posts.json')
  }
})

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ—Å—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
function getPosts() {
  try {
    const raw = fs.readFileSync(FILE_PATH, 'utf-8')
    const parsed = JSON.parse(raw)
    console.log('üìö –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ—Å—Ç—ã –∏–∑ posts.json:', parsed)
    return parsed
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è posts.json:', e)
    return {}
  }
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
export function savePost(postId, text) {
  const posts = getPosts()
  posts[postId] = text

  try {
    fs.writeFileSync(FILE_PATH, JSON.stringify(posts, null, 2), 'utf-8')
    console.log(`‚úÖ –ü–æ—Å—Ç ${postId} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ posts.json`)
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ posts.json:', err)
  }
}

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ postId
export function getPostText(postId) {
  const posts = getPosts()
  const text = posts[postId]
  console.log('üì• –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è id', postId, ':', text)
  return text || ''
}
