import fs from 'fs'
import path from 'path'

// –ù–∞ Render –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ /tmp ‚Äî –∏–Ω–∞—á–µ writeFileSync –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å
const FILE_PATH = path.resolve('/tmp/posts.json')

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
let posts = {}

try {
  if (fs.existsSync(FILE_PATH)) {
    const raw = fs.readFileSync(FILE_PATH, 'utf-8')
    posts = JSON.parse(raw)
    console.log('üìö –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ—Å—Ç—ã –∏–∑ posts.json')
  } else {
    console.log('üìÅ posts.json –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ—Å—Ç–µ')
  }
} catch (e) {
  console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è posts.json:', e)
}

export function savePost(postId, text) {
  posts[postId] = text

  try {
    fs.writeFileSync(FILE_PATH, JSON.stringify(posts, null, 2), 'utf-8')
    console.log(`üíæ –ü–æ—Å—Ç ${postId} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ posts.json`)
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ posts.json:', err)
  }
}

export function getPostText(postId) {
  return posts[postId] || ''
}
