// ESM-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è vkReply.js

import axios from 'axios'
import { getReplyFromAssistant } from './openai.js'
import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'
import { dirname } from 'path'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

const REPLIED_IDS_FILE = path.resolve(__dirname, 'replied.json')
let repliedIds = []

if (fs.existsSync(REPLIED_IDS_FILE)) {
  try {
    repliedIds = JSON.parse(fs.readFileSync(REPLIED_IDS_FILE, 'utf-8'))
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è replied.json', e)
  }
}

const ACCESS_TOKEN = process.env.VK_ACCESS_TOKEN
const GROUP_ID = parseInt(process.env.VK_GROUP_ID)

export async function handleVKCallback(data) {
  console.log('üì© VK Callback –ø–æ–ª—É—á–µ–Ω:', JSON.stringify(data, null, 2))

  const type = data.type

  if (type === 'wall_reply_new') {
    console.log('üí¨ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ —Å—Ç–µ–Ω–µ (wall_reply_new)')

    const comment = data.object
    const fromId = comment.from_id
    const postId = comment.post_id
    const ownerId = comment.owner_id
    const replyToUser = comment.reply_to_user
    const text = comment.text?.trim()

    if (fromId === -GROUP_ID || !text) return

    const isPostFromCommunity = ownerId === -GROUP_ID
    const isReplyToAssistant = replyToUser === -GROUP_ID

    const commentsCheck = await axios.get('https://api.vk.com/method/wall.getComments', {
      params: {
        owner_id: ownerId,
        post_id: postId,
        comment_id: comment.id,
        access_token: ACCESS_TOKEN,
        v: '5.199',
        thread_items_count: 10
      }
    })

    const replies = commentsCheck.data?.response?.items || []
    const alreadyReplied = replies.some(c => c.from_id === -GROUP_ID)

    if (repliedIds.includes(comment.id)) {
      console.log('‚è≠ –£–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏ –Ω–∞ —ç—Ç–æ—Ç comment_id —Ä–∞–Ω–µ–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º')
      return
    }

    console.log('üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ:', alreadyReplied)

    if (alreadyReplied) {
      console.log('‚è≠ –û—Ç–≤–µ—Ç —É–∂–µ –±—ã–ª ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º')
      return
    }

    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π:')
    console.log('ownerId =', ownerId)
    console.log('isPostFromCommunity =', isPostFromCommunity)
    console.log('replyToUser =', replyToUser)
    console.log('isReplyToAssistant =', isReplyToAssistant)

    if (isPostFromCommunity || isReplyToAssistant) {
      // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º –ø–æ—Å—Ç –ø–æ ID
      const postResponse = await axios.get('https://api.vk.com/method/wall.getById', {
        params: {
          posts: `${ownerId}_${postId}`,
          access_token: ACCESS_TOKEN,
          v: '5.199'
        }
      })

      console.log('üì® –û—Ç–≤–µ—Ç –æ—Ç wall.getById:', JSON.stringify(postResponse.data, null, 2))

      const originalPostText = postResponse.data?.response?.[0]?.text || ''
      const context = originalPostText ? [originalPostText, text] : [text]
      console.log('üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Assistant:', context)
      const reply = await getReplyFromAssistant(context)

      await axios.get('https://api.vk.com/method/wall.createComment', {
        params: {
          owner_id: ownerId,
          post_id: postId,
          message: reply,
          from_group: 1,
          reply_to_comment: comment.id,
          access_token: ACCESS_TOKEN,
          v: '5.199'
        }
      })

      console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏')

      repliedIds.push(comment.id)

      fs.writeFile(REPLIED_IDS_FILE, JSON.stringify(repliedIds), (err) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ replied.json', err)
        } else {
          console.log('üíæ –ó–∞–ø–∏—Å–∞–ª–∏ comment_id –≤ replied.json')
        }
      })
    } else {
      console.log('‚è≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω (–Ω–µ –∫ –ø–æ—Å—Ç—É –±–æ—Ç–∞ –∏ –Ω–µ –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É)')
    }
  }

  if (type === 'wall_post_new') {
    console.log('üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç –Ω–∞ —Å—Ç–µ–Ω–µ (wall_post_new)')

    const post = data.object
    const fromId = post.from_id
    const postId = post.id
    const ownerId = post.owner_id
    const text = post.text?.trim()

    if (fromId === -GROUP_ID || !text) return

    const commentsCheck = await axios.get('https://api.vk.com/method/wall.getComments', {
      params: {
        owner_id: ownerId,
        post_id: postId,
        access_token: ACCESS_TOKEN,
        v: '5.199',
        thread_items_count: 10
      }
    })

    const replies = commentsCheck.data?.response?.items || []
    const alreadyReplied = replies.some(c => c.from_id === -GROUP_ID)

    console.log('üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ:', alreadyReplied)

    if (alreadyReplied) {
      console.log('‚è≠ –û—Ç–≤–µ—Ç —É–∂–µ –±—ã–ª ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º')
      return
    }

    const reply = await getReplyFromAssistant([text])

    await axios.get('https://api.vk.com/method/wall.createComment', {
      params: {
        owner_id: -GROUP_ID,
        post_id: postId,
        message: reply,
        from_group: 1,
        access_token: ACCESS_TOKEN,
        v: '5.199'
      }
    })

    console.log('‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –Ω–æ–≤—ã–π –ø–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
  }
}
